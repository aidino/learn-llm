"""
Comet ML Configuration for Gemma3N Math Tutor Fine-tuning

C√°ch setup:
1. T·∫°o t√†i kho·∫£n t·∫°i https://www.comet.com/
2. T·∫°o workspace v√† project
3. L·∫•y API key t·ª´ https://www.comet.com/api/my/settings/
4. C·∫≠p nh·∫≠t th√¥ng tin d∆∞·ªõi ƒë√¢y
"""

import os

# =============================================================================
# COMET ML CONFIGURATION
# =============================================================================

# Comet ML Credentials
COMET_CONFIG = {
    # API Key - REQUIRED
    # C√°ch 1: Set environment variable
    # export COMET_API_KEY="your-api-key-here"
    
    # C√°ch 2: Set tr·ª±c ti·∫øp (kh√¥ng khuy·∫øn ngh·ªã cho production)
    "api_key": os.getenv("COMET_API_KEY"),  # Ho·∫∑c thay b·∫±ng API key c·ªßa b·∫°n
    
    # Workspace - REQUIRED
    # T√™n workspace tr√™n Comet ML
    "workspace": "your-workspace-name",  # Thay b·∫±ng workspace c·ªßa b·∫°n
    
    # Project Name - REQUIRED  
    # T√™n project tr√™n Comet ML
    "project": "gemma3n-math-tutor",  # C√≥ th·ªÉ thay ƒë·ªïi t√™n project
    
    # Experiment Name - OPTIONAL
    # T√™n experiment c·ª• th·ªÉ (t·ª± ƒë·ªông generate n·∫øu kh√¥ng set)
    "experiment_name": None,  # Ho·∫∑c ƒë·∫∑t t√™n custom nh∆∞ "exp-001"
    
    # Tags - OPTIONAL
    # Tags ƒë·ªÉ ph√¢n lo·∫°i experiments
    "tags": [
        "gemma3n",
        "vision-language", 
        "math-tutor",
        "vietnamese",
        "sixth-grade",
        "fine-tuning"
    ],
    
    # Additional Settings
    "auto_metric_logging": True,     # T·ª± ƒë·ªông log metrics
    "auto_param_logging": True,      # T·ª± ƒë·ªông log parameters
    "auto_histogram_weight_logging": True,   # Log weight histograms
    "auto_histogram_gradient_logging": True, # Log gradient histograms
    "auto_histogram_activation_logging": False,  # T·∫Øt ƒë·ªÉ ti·∫øt ki·ªám memory
    "auto_output_logging": "default",  # Log output (stdout/stderr)
    
    # Model Logging
    "log_model": True,              # Upload model artifacts
    "log_graph": False,             # Log model graph (c√≥ th·ªÉ ch·∫≠m)
    "log_code": True,               # Log source code
    "log_git_metadata": True,       # Log git information
}

# =============================================================================
# HELPER FUNCTIONS
# =============================================================================

def validate_comet_config():
    """Validate Comet ML configuration."""
    
    if not COMET_CONFIG["api_key"]:
        print("‚ùå COMET_API_KEY is required!")
        print("Please set environment variable: export COMET_API_KEY='your-key'")
        print("Or get your API key from: https://www.comet.com/api/my/settings/")
        return False
    
    if not COMET_CONFIG["workspace"]:
        print("‚ùå Workspace name is required!")
        print("Please update COMET_CONFIG['workspace'] in comet_config.py")
        return False
    
    if not COMET_CONFIG["project"]:
        print("‚ùå Project name is required!")
        print("Please update COMET_CONFIG['project'] in comet_config.py")
        return False
    
    return True

def setup_comet_environment():
    """Setup environment variables for Comet ML."""
    
    if COMET_CONFIG["api_key"]:
        os.environ["COMET_API_KEY"] = COMET_CONFIG["api_key"]
    
    if COMET_CONFIG["workspace"]:
        os.environ["COMET_WORKSPACE"] = COMET_CONFIG["workspace"]
    
    if COMET_CONFIG["project"]:
        os.environ["COMET_PROJECT_NAME"] = COMET_CONFIG["project"]

def print_comet_info():
    """Print Comet ML configuration info."""
    
    print("üîß Comet ML Configuration:")
    print(f"   Workspace: {COMET_CONFIG['workspace']}")
    print(f"   Project: {COMET_CONFIG['project']}")
    print(f"   API Key: {'‚úÖ Set' if COMET_CONFIG['api_key'] else '‚ùå Not set'}")
    print(f"   Tags: {', '.join(COMET_CONFIG['tags'])}")

# =============================================================================
# USAGE EXAMPLE
# =============================================================================

if __name__ == "__main__":
    # Test configuration
    print("Testing Comet ML configuration...")
    
    if validate_comet_config():
        print("‚úÖ Configuration is valid!")
        setup_comet_environment()
        print_comet_info()
        
        # Test connection
        try:
            import comet_ml
            experiment = comet_ml.Experiment(
                workspace=COMET_CONFIG["workspace"],
                project_name=COMET_CONFIG["project"],
            )
            print(f"‚úÖ Successfully connected to Comet ML!")
            print(f"üîó Experiment URL: {experiment.url}")
            experiment.end()
            
        except ImportError:
            print("‚ùå comet_ml not installed. Run: pip install comet-ml")
        except Exception as e:
            print(f"‚ùå Failed to connect to Comet ML: {e}")
            
    else:
        print("‚ùå Configuration is invalid!")